service: poke-backend

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  environment:
    USERS_TABLE: poke-users
    POKES_TABLE: poke-pokes
    CONVERSATIONS_TABLE: poke-conversations
    MESSAGES_TABLE: poke-messages
    JWT_SECRET: your_jwt_secret_here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:GetItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USERS_TABLE}/index/phone-index"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.POKES_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.CONVERSATIONS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.MESSAGES_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.MESSAGES_TABLE}/index/conversationIndex"

functions:
  login:
    handler: src/handlers.login
    events:
      - http:
          path: login
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  verifyOtp:
    handler: src/handlers.verifyOtp
    events:
      - http:
          path: verify-otp
          method: post
          cors: true
  updateProfile:
    handler: src/handlers.updateProfile
    events:
      - http:
          path: update-profile
          method: post
          cors: true
  updateLocation:
    handler: src/handlers.updateLocation
    events:
      - http:
          path: update-location
          method: post
          cors: true
  getNearbyUsers:
    handler: src/handlers.getNearbyUsers
    events:
      - http:
          path: users/nearby
          method: get
          cors: true
  sendPoke:
    handler: src/handlers.sendPoke
    events:
      - http:
          path: poke
          method: post
          cors: true
  getIncomingPokes:
    handler: src/handlers.getIncomingPokes
    events:
      - http:
          path: pokes/incoming
          method: get
          cors: true
  getOutgoingPokes:
    handler: src/handlers.getOutgoingPokes
    events:
      - http:
          path: pokes/outgoing
          method: get
          cors: true
  sendMessage:
    handler: src/handlers.sendMessage
    events:
      - http:
          path: message
          method: post
          cors: true
  getChats:
    handler: src/handlers.getChats
    events:
      - http:
          path: chats
          method: get
          cors: true
  getMessages:
    handler: src/handlers.getMessages
    events:
      - http:
          path: conversation/{conversationId}/messages
          method: get
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: poke-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: phone
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: phone-index
            KeySchema:
              - AttributeName: phone
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PokesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: poke-pokes
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: poke-conversations
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: poke-messages
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: conversationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: conversationIndex
            KeySchema:
              - AttributeName: conversationId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    PokeFrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: poke-frontend-bucket # Replace with a globally unique name if needed
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    PokeFrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PokeFrontendBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "${PokeFrontendBucket.Arn}/*"

    PokeFrontendCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Sub "${PokeFrontendBucket}.s3-website-${self:provider.region}.amazonaws.com"
              Id: S3WebsiteOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3WebsiteOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: false

  Outputs:
    PokeFrontendBucketName:
      Description: "The name of the frontend S3 bucket"
      Value: !Ref PokeFrontendBucket
    PokeFrontendCloudFrontDomain:
      Description: "The CloudFront distribution domain for the frontend"
      Value: !GetAtt PokeFrontendCloudFront.DomainName
